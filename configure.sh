#!/bin/bash
#
# colorful - simple 2D sideview shooter
# Copyright (C) 2022 suve (a.k.a. Artur Frenszek-Iwicki)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -eu -o pipefail

function show_help() {
	cat <<EOF
configure.sh for colorful
Accepted options:

--android BOOLEAN
  Controls whether Android-specific build settings are enabled.
  The default value is "false".

--assets <bundle, standalone, systemwide>
  Specifies where the game should expect asset files to be located.
  * bundle: Assets are expected to be found two directory levels
            above the executable, like in the following structure:
            - bin/linux64
            - bin/win64
            - gfx/
  * standalone: Assets are expected to be found in the same directory,
                right next to the executable.
  * systemwide: Assets are expected to be found in /usr/share/suve/colorful.
  The default value is "standalone".

--fpc FULL_PATH
  Use the Free Pascal Compiler located at FULL_PATH.
  The default is to use "fpc".

--flags FLAGS
  Pass FLAGS to fpc. Can be specified multiple times.

--ogg-quality QUALITY
  Encode sound effects to .ogg with this quality setting.
  The default value is "10".

--strip BOOLEAN
  Controls whether the built executable should be stripped of debug symbols.
  The default value is "false".
EOF
}

# Helper functions

function parse_bool() {
	local flag="${1}"
	local value="${2}"

	if [[ "${value}" == "true" ]] || [[ "${value}" == "yes" ]] || [[ "${value}" == "1" ]]; then
		echo "true"
	elif [[ "${value}" == "false" ]] || [[ "${value}" == "no" ]] || [[ "${value}" == "0" ]]; then
		echo "false"
	else
		echo "Error: The argument to ${flag} must be one of \"true\", \"yes\", \"1\", \"false\", \"no\", or \"0\"" >&2
		exit 1
	fi
}

# Set defaults

ANDROID="false"
ASSETS="standalone"
FPC="fpc"
USER_FLAGS=""
OGG_QUALITY="10"
PLATFORM="desktop"
STRIP="false"

while [[ "${#}" -gt 0 ]]; do
	if [[ "${1}" == "--help" ]]; then
		show_help
		exit
	fi

	if [[ "${1}" == "--android" ]]; then
		ANDROID="$(parse_bool "--android" "${2}")"
	elif [[ "${1}" == "--assets" ]]; then
		if [[ "${2}" != "bundle" ]] && [[ "${2}" != "standalone" ]] && [[ "${2}" != "systemwide" ]]; then
			echo "Error: The argument to --assets must be one of \"bundle\", \"standalone\" or \"systemwide\"" >&2
			exit 1
		fi
		ASSETS="${2}"
	elif [[ "${1}" == "--fpc" ]]; then
		FPC="${2}"
	elif [[ "${1}" == "--flags" ]]; then
		USER_FLAGS="${USER_FLAGS} ${2}"
	elif [[ "${1}" == "--ogg-quality" ]]; then
		OGG_QUALITY="${2}"
	elif [[ "${1}" == "--strip" ]]; then
		STRIP="$(parse_bool "--strip" "${2}")"
	else
		echo "Unknown option \"${1}\"" >&2
		exit 1
	fi

	shift 2
done

# Print out used values

cat <<EOF
Config values:
  ANDROID = ${ANDROID}
  ASSETS = ${ASSETS}
  FPC = ${FPC}
  FLAGS = ${USER_FLAGS}
  OGG_QUALITY = ${OGG_QUALITY}
  STRIP = ${STRIP}
EOF

# Calculate Makefile variables from arguments

BUILD_FLAGS="-O2 -dLD25_ASSETS_${ASSETS}"

if [[ "${ANDROID}" == "true" ]]; then
	EXE_PREFIX="lib"
	EXE_SUFFIX=".so"
	GFX_FILTER=""
	BUILD_FLAGS="-Tandroid ${BUILD_FLAGS}"
else
	EXE_PREFIX=""
	EXE_SUFFIX=""
	GFX_FILTER="gfx/touch-controls.png"
fi

if [[ "${STRIP}" == "true" ]]; then
	BUILD_FLAGS="${BUILD_FLAGS} -CX -XX -Xs"
else
	BUILD_FLAGS="${BUILD_FLAGS} -gl -gw"
fi

FPC_FLAGS="${BUILD_FLAGS} ${USER_FLAGS}"

# cd to this script's directory and create the Makefile
cd "$(dirname "${0}")"

echo 'Generating Makefile...'

(cat <<EOF
# !
# ! This file has been generated by "configure.sh".
# ! Do not edit manually.
# !

EXE_PREFIX := ${EXE_PREFIX}
EXE_SUFFIX := ${EXE_SUFFIX}
FPC := ${FPC}
FPC_FLAGS := ${FPC_FLAGS}
GFX_FILTER := ${GFX_FILTER}
OGG_QUALITY := ${OGG_QUALITY}

EOF
) | cat - Makefile.in > Makefile

echo 'Done.'
